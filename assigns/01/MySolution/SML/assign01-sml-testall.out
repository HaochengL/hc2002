Standard ML of New Jersey (32-bit) v110.99.3 [built: Thu Jul 28 00:45:02 2022]
[opening .\assign01-01-test.sml]
[opening ./../../../../mysmlib/mysmlib-cls.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val int_max = fn : int * int -> int
val int_min = fn : int * int -> int
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
exception NotImplemented320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val print_bool = fn : bool -> unit
val print_string = fn : string -> unit
val print_newline = fn : unit -> unit
val println = fn : string -> unit
val println_string = fn : string -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_extend = fn : 'a list * 'a -> 'a list
val list_head = fn : 'a list -> 'a
val list_tail = fn : 'a list -> 'a list
val hd = fn : 'a list -> 'a
val tl = fn : 'a list -> 'a list
val list_headopt = fn : 'a list -> 'a optn
val list_tailopt = fn : 'a list -> 'a list optn
val list_last = fn : 'a list -> 'a
val list_append = fn : 'a list * 'a list -> 'a list
val @ = fn : 'a list * 'a list -> 'a list
val list_fromto = fn : int * int -> int list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
val it = () : unit
[opening ./../../MySolution/SML/assign01-01.sml]
[opening ./../../assign01-lib.sml]
[autoloading]
[autoloading done]
val list_append = <hidden> : 'a list * 'a list -> 'a list
val list_reverse = <hidden> : 'a list -> 'a list
exception XlistConsMatch
exception XlistSubscript
exception NotImplemented320
val list_append = fn : 'a list * 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
datatype 'a xlist
  = xlist_append of 'a xlist * 'a xlist
  | xlist_cons of 'a * 'a xlist
  | xlist_nil
  | xlist_reverse of 'a xlist
  | xlist_snoc of 'a xlist * 'a
val list_of_xlist = fn : 'a xlist -> 'a list
val list_quicksort = fn : int list -> int list
val list_mergesort = fn : int list -> int list
val it = () : unit
val xlist_size = fn : 'a xlist -> int
val it = () : unit
Assign01-01-test passed!
val list_size = fn : 'a list -> int
val xs = <hidden> : 'a xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs =
  xlist_append
    (xlist_reverse
       (xlist_snoc
          (xlist_cons (1,xlist_append (xlist_reverse #,xlist_reverse #)),2)),
     xlist_reverse
       (xlist_snoc
          (xlist_cons (1,xlist_append (xlist_reverse #,xlist_reverse #)),2)))
  : int xlist




Standard ML of New Jersey (32-bit) v110.99.3 [built: Thu Jul 28 00:45:02 2022]
[opening .\assign01-02-test.sml]
[opening ./../../../../mysmlib/mysmlib-cls.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val int_max = fn : int * int -> int
val int_min = fn : int * int -> int
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
exception NotImplemented320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val print_bool = fn : bool -> unit
val print_string = fn : string -> unit
val print_newline = fn : unit -> unit
val println = fn : string -> unit
val println_string = fn : string -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_extend = fn : 'a list * 'a -> 'a list
val list_head = fn : 'a list -> 'a
val list_tail = fn : 'a list -> 'a list
val hd = fn : 'a list -> 'a
val tl = fn : 'a list -> 'a list
val list_headopt = fn : 'a list -> 'a optn
val list_tailopt = fn : 'a list -> 'a list optn
val list_last = fn : 'a list -> 'a
val list_append = fn : 'a list * 'a list -> 'a list
val @ = fn : 'a list * 'a list -> 'a list
val list_fromto = fn : int * int -> int list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
val it = () : unit
[opening ./../../MySolution/SML/assign01-02.sml]
[opening ./../../assign01-lib.sml]
[autoloading]
[autoloading done]
val list_append = <hidden> : 'a list * 'a list -> 'a list
val list_reverse = <hidden> : 'a list -> 'a list
exception XlistConsMatch
exception XlistSubscript
exception NotImplemented320
val list_append = fn : 'a list * 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
datatype 'a xlist
  = xlist_append of 'a xlist * 'a xlist
  | xlist_cons of 'a * 'a xlist
  | xlist_nil
  | xlist_reverse of 'a xlist
  | xlist_snoc of 'a xlist * 'a
val list_of_xlist = fn : 'a xlist -> 'a list
val list_quicksort = fn : int list -> int list
val list_mergesort = fn : int list -> int list
val it = () : unit
[opening ./../../MySolution/SML/assign01-01.sml]
[opening ./../../assign01-lib.sml]
val list_append = <hidden> : 'a list * 'a list -> 'a list
val list_reverse = <hidden> : 'a list -> 'a list
exception XlistConsMatch
exception XlistSubscript
exception NotImplemented320
val list_append = fn : 'a list * 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
datatype 'a xlist
  = xlist_append of 'a xlist * 'a xlist
  | xlist_cons of 'a * 'a xlist
  | xlist_nil
  | xlist_reverse of 'a xlist
  | xlist_snoc of 'a xlist * 'a
val list_of_xlist = fn : 'a xlist -> 'a list
val list_quicksort = fn : int list -> int list
val list_mergesort = fn : int list -> int list
val it = () : unit
val xlist_size = fn : 'a xlist -> int
val it = () : unit
val xlist_sub = fn : 'a xlist * int -> 'a
val xs = <hidden> : 'a xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs =
  xlist_snoc (xlist_snoc (xlist_snoc (xlist_snoc (xlist_snoc (#,#),2),3),4),5)
  : int xlist
val test222 = [1,2,3,4,5] : int list
val test333 = 5 : int
val it = () : unit
Assign01-02-test passed!
val list_size = fn : 'a list -> int
val xs = <hidden> : 'a xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs =
  xlist_append
    (xlist_reverse
       (xlist_snoc
          (xlist_cons (1,xlist_append (xlist_reverse #,xlist_reverse #)),2)),
     xlist_reverse
       (xlist_snoc
          (xlist_cons (1,xlist_append (xlist_reverse #,xlist_reverse #)),2)))
  : int xlist




Standard ML of New Jersey (32-bit) v110.99.3 [built: Thu Jul 28 00:45:02 2022]
[opening .\assign01-03-test.sml]
[opening ./../../../../mysmlib/mysmlib-cls.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val int_max = fn : int * int -> int
val int_min = fn : int * int -> int
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
exception NotImplemented320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val print_bool = fn : bool -> unit
val print_string = fn : string -> unit
val print_newline = fn : unit -> unit
val println = fn : string -> unit
val println_string = fn : string -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_extend = fn : 'a list * 'a -> 'a list
val list_head = fn : 'a list -> 'a
val list_tail = fn : 'a list -> 'a list
val hd = fn : 'a list -> 'a
val tl = fn : 'a list -> 'a list
val list_headopt = fn : 'a list -> 'a optn
val list_tailopt = fn : 'a list -> 'a list optn
val list_last = fn : 'a list -> 'a
val list_append = fn : 'a list * 'a list -> 'a list
val @ = fn : 'a list * 'a list -> 'a list
val list_fromto = fn : int * int -> int list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
val it = () : unit
[opening ./../../MySolution/SML/assign01-03.sml]
[opening ./../../assign01-lib.sml]
[autoloading]
[autoloading done]
val list_append = <hidden> : 'a list * 'a list -> 'a list
val list_reverse = <hidden> : 'a list -> 'a list
exception XlistConsMatch
exception XlistSubscript
exception NotImplemented320
val list_append = fn : 'a list * 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
datatype 'a xlist
  = xlist_append of 'a xlist * 'a xlist
  | xlist_cons of 'a * 'a xlist
  | xlist_nil
  | xlist_reverse of 'a xlist
  | xlist_snoc of 'a xlist * 'a
val list_of_xlist = fn : 'a xlist -> 'a list
val list_quicksort = fn : int list -> int list
val list_mergesort = fn : int list -> int list
val it = () : unit
val xlist_remove_reverse = fn : 'a xlist -> 'a xlist
val xs1 = <hidden> : 'a xlist
val xs1 = <hidden> : int xlist
val xs1 = <hidden> : int xlist
val xs1 = <hidden> : int xlist
val xs1 =
  xlist_reverse
    (xlist_append
       (xlist_snoc (xlist_snoc (xlist_nil,2),3),
        xlist_snoc (xlist_snoc (xlist_nil,2),3))) : int xlist
val ys1 =
  xlist_append
    (xlist_cons (3,xlist_cons (2,xlist_nil)),
     xlist_cons (3,xlist_cons (2,xlist_nil))) : int xlist
val test1 = [3,2,3,2] : int list
val test2 = [3,2,3,2] : int list
val it = () : unit
Assign01-03-test passed!
val list_size = fn : 'a list -> int
val nappend = fn : 'a xlist -> int
val nreverse = fn : 'a xlist -> int
val xs = <hidden> : 'a xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val ys = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs = <hidden> : int xlist
val xs =
  xlist_append
    (xlist_reverse
       (xlist_snoc
          (xlist_cons (1,xlist_append (xlist_reverse #,xlist_reverse #)),2)),
     xlist_reverse
       (xlist_snoc
          (xlist_cons (1,xlist_append (xlist_reverse #,xlist_reverse #)),2)))
  : int xlist
val ys =
  xlist_append
    (xlist_cons
       (2,xlist_snoc (xlist_append (xlist_snoc (#,#),xlist_snoc (#,#)),1)),
     xlist_cons
       (2,xlist_snoc (xlist_append (xlist_snoc (#,#),xlist_snoc (#,#)),1)))
  : int xlist




Standard ML of New Jersey (32-bit) v110.99.3 [built: Thu Jul 28 00:45:02 2022]
[opening .\assign01-04-test.sml]
[opening ./../../MySolution/SML/assign01-04.sml]
[opening ./../../assign01-lib.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val list_append = <hidden> : 'a list * 'a list -> 'a list
val list_reverse = <hidden> : 'a list -> 'a list
exception XlistConsMatch
exception XlistSubscript
exception NotImplemented320
val list_append = fn : 'a list * 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
datatype 'a xlist
  = xlist_append of 'a xlist * 'a xlist
  | xlist_cons of 'a * 'a xlist
  | xlist_nil
  | xlist_reverse of 'a xlist
  | xlist_snoc of 'a xlist * 'a
val list_of_xlist = fn : 'a xlist -> 'a list
val list_quicksort = fn : int list -> int list
val list_mergesort = fn : int list -> int list
val it = () : unit
[autoloading]
[autoloading done]
val str2int_opt = fn : string -> int option
val x1 = SOME 12345 : int option
val x2 = NONE : int option
val x3 = SOME 1 : int option
val x4 = NONE : int option
val x5 = NONE : int option
val it = () : unit
Assign01-04-test passed!